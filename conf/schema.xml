<?xml version="1.0" encoding="UTF-8" ?>


<!--
 PERFORMANCE NOTE: this schema includes many optional features and should not
 be used for benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you
    only need to search on the field but don't need to return the original
    value.
  - set indexed="false" if you don't need to search on the field, but only
    return the field as a result of searching on other indexed fields.
  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
    java client.
  - Remember to run the JVM in server mode, and use a higher logging level
    that avoids logging every request
-->

<schema name="images-schema" version="1.5">
	<!-- Valid attributes for fields:
     name: mandatory - the name for the field
     type: mandatory - the name of a field type from the 
       <types>fieldType section
     indexed: true if this field should be indexed (searchable or sortable)
     stored: true if this field should be retrievable
     docValues: true if this field should have doc values. Doc values are
       useful for faceting, grouping, sorting and function queries. Although not
       required, doc values will make the index faster to load, more
       NRT-friendly and more memory-efficient. They however come with some
       limitations: they are currently only supported by StrField, UUIDField
       and all Trie*Fields, and depending on the field type, they might
       require the field to be single-valued, be required or have a default
       value (check the documentation of the field type you're interested in
       for more information)
     multiValued: true if this field may contain multiple values per document
     omitNorms: (expert) set to true to omit the norms associated with
       this field (this disables length normalization and index-time
       boosting for the field, and saves some memory).  Only full-text
       fields or fields that need an index-time boost need norms.
       Norms are omitted for primitive (non-analyzed) types by default.
     termVectors: [false] set to true to store the term vector for a
       given field.
       When using MoreLikeThis, fields used for similarity should be
       stored for best performance.
     termPositions: Store position information with the term vector.  
       This will increase storage costs.
     termOffsets: Store offset information with the term vector. This 
       will increase storage costs.
     required: The field is required.  It will throw an error if the
       value does not exist
     default: a value that should be used if no value is specified
       when adding a document.
   -->
	<!-- field names should consist of alphanumeric or underscore characters only and
      not start with a digit.  This is not currently strictly enforced,
      but other field names will not have first class support from all components
      and back compatibility is not guaranteed.  Names with both leading and
      trailing underscores (e.g. _version_) are reserved.
   -->
	<!-- In this data_driven_schema_configs configset, only three fields are pre-declared: 
         id, _version_, and _text_.  All other fields will be type guessed and added via the
         "add-unknown-fields-to-the-schema" update request processor chain declared 
         in solrconfig.xml.
         
         Note that many dynamic fields are also defined - you can use them to specify a 
         field's type via field naming conventions - see below.
  
  WARNING: The _text_ catch-all field will significantly increase your index size.
           If you don't need it, consider removing it and the corresponding copyField directive.
      -->
	<field name="id" indexed="true" multiValued="false" required="true" stored="true" type="string"/>
	<field name="_version_" indexed="true" stored="true" type="long"/>
	<field name="url" indexed="false" multiValued="false" required="true" stored="true" type="url"/>
	<field name="previous" docValues="true" indexed="true" multiValued="false" required="false" stored="false" type="our_text"/>
	<field name="after" docValues="true" indexed="true" multiValued="false" required="false" stored="false" type="our_text"/>
	<field name="text" docValues="true" indexed="true" multiValued="false" required="false" stored="false" type="our_text"/>
	<field name="synonyms" docValues="true" indexed="false" multiValued="false" required="false" stored="false" type="string"/>
	<field name="colors" docValues="false" indexed="true" multiValued="true" required="false" stored="false" type="text_general"/>
	<field name="percentages" docValues="true" indexed="true" multiValued="true" required="false" stored="false" type="float"/>
	
	
	<!--
        fields specifically for the project
    -->
	<fieldType name="url" class="solr.StrField" multiValued="false" omitNorms="true" omitTermFreqAndPositions="true" required="true" stored="true"/>
	
	<fieldType name="our_text" class="solr.TextField" docValues="true" indexed="true" multiValued="false" omitNorms="true" omitTermFreqAndPositions="false" required="true" stored="false">
		<analyzer type="index">
			<tokenizer class="solr.ClassicTokenizerFactory" maxTokenLength="1000"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
			<filter class="solr.LowerCaseFilterFactory"/>
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.ClassicTokenizerFactory" maxTokenLength="1000"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
			<filter class="solr.SynonymFilterFactory" expand="true" ignoreCase="true" synonyms="synonyms.txt"/>
			<filter class="solr.LowerCaseFilterFactory"/>
		</analyzer>
	</fieldType>
	
	
	
	
	<!-- Dynamic field definitions allow using convention over configuration
       for fields via the specification of patterns to match field names. 
       EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
       RESTRICTION: the glob-like pattern in the name attribute must have
       a "*" only at the start or the end.  -->
	<dynamicField indexed="true" name="*_i" stored="true" type="int"/>
	<dynamicField indexed="true" name="*_is" stored="true" type="ints"/>
	<dynamicField indexed="true" name="*_s" stored="true" type="string"/>
	<dynamicField indexed="true" name="*_ss" stored="true" type="strings"/>
	<dynamicField indexed="true" name="*_l" stored="true" type="long"/>
	<dynamicField indexed="true" name="*_ls" stored="true" type="longs"/>
	<dynamicField indexed="true" name="*_t" stored="true" type="text_general"/>
	<dynamicField indexed="true" name="*_txt" stored="true" type="text_general"/>
	<dynamicField indexed="true" name="*_b" stored="true" type="boolean"/>
	<dynamicField indexed="true" name="*_bs" stored="true" type="booleans"/>
	<dynamicField indexed="true" name="*_f" stored="true" type="float"/>
	<dynamicField indexed="true" name="*_fs" stored="true" type="floats"/>
	<dynamicField indexed="true" name="*_d" stored="true" type="double"/>
	<dynamicField indexed="true" name="*_ds" stored="true" type="doubles"/>
	<!-- Type used to index the lat and lon components for the "location" FieldType -->
	<dynamicField indexed="true" name="*_coordinate" stored="false" type="tdouble"/>
	<dynamicField indexed="true" name="*_dt" stored="true" type="date"/>
	<dynamicField indexed="true" multiValued="true" name="*_dts" stored="true" type="date"/>
	<dynamicField indexed="true" name="*_p" stored="true" type="location"/>
	<dynamicField indexed="true" name="*_srpt" stored="true" type="location_rpt"/>
	<!-- some trie-coded dynamic fields for faster range queries -->
	<dynamicField indexed="true" name="*_ti" stored="true" type="tint"/>
	<dynamicField indexed="true" name="*_tis" stored="true" type="tints"/>
	<dynamicField indexed="true" name="*_tl" stored="true" type="tlong"/>
	<dynamicField indexed="true" name="*_tls" stored="true" type="tlongs"/>
	<dynamicField indexed="true" name="*_tf" stored="true" type="tfloat"/>
	<dynamicField indexed="true" name="*_tfs" stored="true" type="tfloats"/>
	<dynamicField indexed="true" name="*_td" stored="true" type="tdouble"/>
	<dynamicField indexed="true" name="*_tds" stored="true" type="tdoubles"/>
	<dynamicField indexed="true" name="*_tdt" stored="true" type="tdate"/>
	<dynamicField indexed="true" name="*_tdts" stored="true" type="tdates"/>
	<dynamicField indexed="true" name="*_c" stored="true" type="currency"/>
	<dynamicField multiValued="true" name="ignored_*" type="ignored"/>
	<dynamicField indexed="true" multiValued="true" name="attr_*" stored="true" type="text_general"/>
	<dynamicField name="random_*" type="random"/>
	<!-- Field to use to determine and enforce document uniqueness. 
      Unless this field is marked with required="false", it will be a required field
   -->
	<uniqueKey>id</uniqueKey>
	<!-- The StrField type is not analyzed, but indexed/stored verbatim.
       It supports doc values but in that case the field needs to be
       single-valued and either required or have a default value.
      -->
	<fieldType class="solr.StrField" name="string" sortMissingLast="true"/>
	<fieldType class="solr.StrField" multiValued="true" name="strings" sortMissingLast="true"/>
	<!-- boolean type: "true" or "false" -->
	<fieldType class="solr.BoolField" name="boolean" sortMissingLast="true"/>
	<fieldType class="solr.BoolField" multiValued="true" name="booleans" sortMissingLast="true"/>
	<!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
         currently supported on types that are sorted internally as strings
         and on numeric types.
	     This includes "string","boolean", and, as of 3.5 (and 4.x),
	     int, float, long, date, double, including the "Trie" variants.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->
	<!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.

      These fields support doc values, but they require the field to be
      single-valued and either be required or have a default value.
    -->
	<fieldType class="solr.TrieIntField" name="int" positionIncrementGap="0" precisionStep="0"/>
	<fieldType class="solr.TrieFloatField" name="float" positionIncrementGap="0" precisionStep="0"/>
	<fieldType class="solr.TrieLongField" name="long" positionIncrementGap="0" precisionStep="0"/>
	<fieldType class="solr.TrieDoubleField" name="double" positionIncrementGap="0" precisionStep="0"/>
	<fieldType class="solr.TrieIntField" multiValued="true" name="ints" positionIncrementGap="0" precisionStep="0"/>
	<fieldType class="solr.TrieFloatField" multiValued="true" name="floats" positionIncrementGap="0" precisionStep="0"/>
	<fieldType class="solr.TrieLongField" multiValued="true" name="longs" positionIncrementGap="0" precisionStep="0"/>
	<fieldType class="solr.TrieDoubleField" multiValued="true" name="doubles" positionIncrementGap="0" precisionStep="0"/>
	<!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->
	<fieldType class="solr.TrieIntField" name="tint" positionIncrementGap="0" precisionStep="8"/>
	<fieldType class="solr.TrieFloatField" name="tfloat" positionIncrementGap="0" precisionStep="8"/>
	<fieldType class="solr.TrieLongField" name="tlong" positionIncrementGap="0" precisionStep="8"/>
	<fieldType class="solr.TrieDoubleField" name="tdouble" positionIncrementGap="0" precisionStep="8"/>
	<fieldType class="solr.TrieIntField" multiValued="true" name="tints" positionIncrementGap="0" precisionStep="8"/>
	<fieldType class="solr.TrieFloatField" multiValued="true" name="tfloats" positionIncrementGap="0" precisionStep="8"/>
	<fieldType class="solr.TrieLongField" multiValued="true" name="tlongs" positionIncrementGap="0" precisionStep="8"/>
	<fieldType class="solr.TrieDoubleField" multiValued="true" name="tdoubles" positionIncrementGap="0" precisionStep="8"/>
	<!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the TrieDateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
	<fieldType class="solr.TrieDateField" name="date" positionIncrementGap="0" precisionStep="0"/>
	<fieldType class="solr.TrieDateField" multiValued="true" name="dates" positionIncrementGap="0" precisionStep="0"/>
	<!-- A Trie based date field for faster date range queries and date faceting. -->
	<fieldType class="solr.TrieDateField" name="tdate" positionIncrementGap="0" precisionStep="6"/>
	<fieldType class="solr.TrieDateField" multiValued="true" name="tdates" positionIncrementGap="0" precisionStep="6"/>
	<!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
	<fieldType class="solr.BinaryField" name="binary"/>
	<!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting 
         or function purposes.  The ordering is generated based on the field
         name and the version of the index. As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.  
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the field name in the request.
     -->
	<fieldType class="solr.RandomSortField" indexed="true" name="random"/>
	<!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->
	
<!--
	<fieldType name="after" class="solr.TextField" docValues="true" indexed="true" multiValued="false" omitNorms="true" omitTermFreqAndPositions="false" required="true" stored="false">
		<analyzer type="index">
			<tokenizer class="solr.ClassicTokenizerFactory" maxTokenLength="1000"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
			<filter class="solr.LowerCaseFilterFactory"/>
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.ClassicTokenizerFactory" maxTokenLength="1000"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
			<filter class="solr.SynonymFilterFactory" expand="true" ignoreCase="true" synonyms="synonyms.txt"/>
			<filter class="solr.LowerCaseFilterFactory"/>
		</analyzer>
	</fieldType>
-->
	
	
	<!-- A text field that only splits on whitespace for exact matching of words -->
	<dynamicField indexed="true" name="*_ws" stored="true" type="text_ws"/>
	<fieldType class="solr.TextField" name="text_ws" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.WhitespaceTokenizerFactory"/>
		</analyzer>
	</fieldType>
	<!-- A general text field that has reasonable, generic
         cross-language defaults: it tokenizes with StandardTokenizer,
	 removes stop words from case-insensitive "stopwords.txt"
	 (empty by default), and down cases. -->
	<fieldType class="solr.TextField" multiValued="true" name="text_general" positionIncrementGap="100">
		<analyzer type="index">
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
			<!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>-->
			<filter class="solr.LowerCaseFilterFactory"/>
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
			<filter class="solr.LowerCaseFilterFactory"/>
		</analyzer>
	</fieldType>
	<!-- A text field with defaults appropriate for English: it
         tokenizes with StandardTokenizer, removes English stop words
         (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
         finally applies Porter's stemming.  The query time analyzer
         also applies synonyms from synonyms.txt. -->
	<dynamicField indexed="true" name="*_txt_en" stored="true" type="text_en"/>
	<fieldType class="solr.TextField" name="text_en" positionIncrementGap="100">
		<analyzer type="index">
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>-->
			<!-- Case insensitive stop word removal.
        -->
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.EnglishPossessiveFilterFactory"/>
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
			<!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>-->
			<filter class="solr.PorterStemFilterFactory"/>
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.SynonymFilterFactory" expand="true" ignoreCase="true" synonyms="synonyms.txt"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.EnglishPossessiveFilterFactory"/>
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
			<!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>-->
			<filter class="solr.PorterStemFilterFactory"/>
		</analyzer>
	</fieldType>
	<!-- A text field with defaults appropriate for English, plus
	 aggressive word-splitting and autophrase features enabled.
	 This field is just like text_en, except it adds
	 WordDelimiterFilter to enable splitting and matching of
	 words on case-change, alpha numeric boundaries, and
	 non-alphanumeric chars.  This means certain compound word
	 cases will work, for example query "wi fi" will match
	 document "WiFi" or "wi-fi".
        -->
	<dynamicField indexed="true" name="*_txt_en_split" stored="true" type="text_en_splitting"/>
	<fieldType autoGeneratePhraseQueries="true" class="solr.TextField" name="text_en_splitting" positionIncrementGap="100">
		<analyzer type="index">
			<tokenizer class="solr.WhitespaceTokenizerFactory"/>
			<!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>-->
			<!-- Case insensitive stop word removal.
        -->
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
			<filter catenateAll="0" catenateNumbers="1" catenateWords="1" class="solr.WordDelimiterFilterFactory" generateNumberParts="1" generateWordParts="1" splitOnCaseChange="1"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
			<filter class="solr.PorterStemFilterFactory"/>
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.WhitespaceTokenizerFactory"/>
			<filter class="solr.SynonymFilterFactory" expand="true" ignoreCase="true" synonyms="synonyms.txt"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
			<filter catenateAll="0" catenateNumbers="0" catenateWords="0" class="solr.WordDelimiterFilterFactory" generateNumberParts="1" generateWordParts="1" splitOnCaseChange="1"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
			<filter class="solr.PorterStemFilterFactory"/>
		</analyzer>
	</fieldType>
	<!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
         but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
	<dynamicField indexed="true" name="*_txt_en_split_tight" stored="true" type="text_en_splitting_tight"/>
	<fieldType autoGeneratePhraseQueries="true" class="solr.TextField" name="text_en_splitting_tight" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.WhitespaceTokenizerFactory"/>
			<filter class="solr.SynonymFilterFactory" expand="false" ignoreCase="true" synonyms="synonyms.txt"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
			<filter catenateAll="0" catenateNumbers="1" catenateWords="1" class="solr.WordDelimiterFilterFactory" generateNumberParts="0" generateWordParts="0"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
			<filter class="solr.EnglishMinimalStemFilterFactory"/>
			<!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
             possible with WordDelimiterFilter in conjuncton with stemming. -->
			<filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
		</analyzer>
	</fieldType>
	<!-- Just like text_general except it reverses the characters of
	 each token, to enable more efficient leading wildcard queries. -->
	<dynamicField indexed="true" name="*_txt_rev" stored="true" type="text_general_rev"/>
	<fieldType class="solr.TextField" name="text_general_rev" positionIncrementGap="100">
		<analyzer type="index">
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.ReversedWildcardFilterFactory" maxFractionAsterisk="0.33" maxPosAsterisk="3" maxPosQuestion="2" withOriginal="true"/>
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.SynonymFilterFactory" expand="true" ignoreCase="true" synonyms="synonyms.txt"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
			<filter class="solr.LowerCaseFilterFactory"/>
		</analyzer>
	</fieldType>
	<dynamicField indexed="true" name="*_phon_en" stored="true" type="phonetic_en"/>
	<fieldType class="solr.TextField" indexed="true" name="phonetic_en" stored="false">
		<analyzer>
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
		</analyzer>
	</fieldType>
	<!-- lowercases the entire field value, keeping it as a single token.  -->
	<dynamicField indexed="true" name="*_s_lower" stored="true" type="lowercase"/>
	<fieldType class="solr.TextField" name="lowercase" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.KeywordTokenizerFactory"/>
			<filter class="solr.LowerCaseFilterFactory"/>
		</analyzer>
	</fieldType>
	<!-- 
      Example of using PathHierarchyTokenizerFactory at index time, so
      queries for paths match documents at that path, or in descendent paths
    -->
	<dynamicField indexed="true" name="*_descendent_path" stored="true" type="descendent_path"/>
	<fieldType class="solr.TextField" name="descendent_path">
		<analyzer type="index">
			<tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/"/>
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.KeywordTokenizerFactory"/>
		</analyzer>
	</fieldType>
	<!-- 
      Example of using PathHierarchyTokenizerFactory at query time, so
      queries for paths match documents at that path, or in ancestor paths
    -->
	<dynamicField indexed="true" name="*_ancestor_path" stored="true" type="ancestor_path"/>
	<fieldType class="solr.TextField" name="ancestor_path">
		<analyzer type="index">
			<tokenizer class="solr.KeywordTokenizerFactory"/>
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/"/>
		</analyzer>
	</fieldType>
	<!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
	<fieldType class="solr.StrField" indexed="false" multiValued="true" name="ignored" stored="false"/>
	<!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if 
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
	<dynamicField indexed="true" name="*_point" stored="true" type="point"/>
	<fieldType class="solr.PointType" dimension="2" name="point" subFieldSuffix="_d"/>
	<!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
	<fieldType class="solr.LatLonType" name="location" subFieldSuffix="_coordinate"/>
	<!-- An alternative geospatial field type new to Solr 4.  It supports multiValued and polygon shapes.
      For more information about this and other Spatial fields new to Solr 4, see:
      http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4
    -->
	<fieldType class="solr.SpatialRecursivePrefixTreeFieldType" distErrPct="0.025" distanceUnits="kilometers" geo="true" maxDistErr="0.001" name="location_rpt"/>
	<!-- Money/currency field type. See http://wiki.apache.org/solr/MoneyFieldType
        Parameters:
          defaultCurrency: Specifies the default currency if none specified. Defaults to "USD"
          precisionStep:   Specifies the precisionStep for the TrieLong field used for the amount
          providerClass:   Lets you plug in other exchange provider backend:
                           solr.FileExchangeRateProvider is the default and takes one parameter:
                             currencyConfig: name of an xml file holding exchange rates
                           solr.OpenExchangeRatesOrgProvider uses rates from openexchangerates.org:
                             ratesFileLocation: URL or path to rates JSON file (default latest.json on the web)
                             refreshInterval: Number of minutes between each rates fetch (default: 1440, min: 60)
   -->
	<fieldType class="solr.CurrencyField" currencyConfig="currency.xml" defaultCurrency="USD" name="currency" precisionStep="8"/>
	<!-- Similarity is the scoring routine for each document vs. a query.
       A custom Similarity or SimilarityFactory may be specified here, but 
       the default is fine for most applications.  
       For more info: http://wiki.apache.org/solr/SchemaXml#Similarity
    -->
	<!--
     <similarity class="com.example.solr.CustomSimilarityFactory"><str name="paramkey">param value</str></similarity>-->
</schema>
